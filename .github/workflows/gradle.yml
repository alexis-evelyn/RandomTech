# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build Mod

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
      env:
        BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
        BINTRAY_ENCRYPTED_PASSWORD: ${{ secrets.BINTRAY_ENCRYPTED_PASSWORD }}
    - name: Publish To Artifactory (For Snapshots, But Can Take Releases)
      run: ./gradlew artifactoryPublish
      env:
        BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
        BINTRAY_ENCRYPTED_PASSWORD: ${{ secrets.BINTRAY_ENCRYPTED_PASSWORD }}
      continue-on-error: true
    - name: Publish To Sonatype (Owner of Maven Central)
      run: ./gradlew publish
      env:
        BINTRAY_GPG_KEY_ID: ${{ secrets.BINTRAY_GPG_KEY_ID }}
        BINTRAY_GPG_KEY: ${{ secrets.BINTRAY_GPG_KEY }}
        BINTRAY_GPG_PASSWORD: ${{ secrets.BINTRAY_GPG_PASSWORD }}
      continue-on-error: true
    - name: Publish Artifacts To Github Actions
      uses: actions/upload-artifact@v2
      with:
        name: Jars
        path: |
          build/libs/
          api/build/libs/
#    - name: Create Github Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#      with:
#        tag_name: ${{ github.ref }}
#        release_name: Release ${{ github.ref }}
#        body: |
#          Autogenerated Build ${{ github.ref }}
#            For those who don't want to go to Bintray
#        draft: false
#        prerelease: false
#    - name: Publish RandomTech to Github Release
#      id: upload-release-asset-randomtech
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        file_glob: true
#        file: build/libs/*.jar
#    - name: Publish API to Github Release
#      id: upload-release-asset-api
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        file_glob: true
#        file: api/build/libs/*.jar