// configure the maven publication
// Use bintrayUpload, not bintrayPublish
publishing {
    publications {
        publishAPI(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact javadocsJar
            groupId = project.maven_group
            artifactId = 'randomtechapi'
            version = project.version

            pom {
                name = 'API'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'The API designed for RandomTech, just released separately for other mod developers to use.'
                url = 'https://github.com/alexis-evelyn/RandomTech/blob/master/README.md'
                // logo = 'https://raw.githubusercontent.com/alexis-evelyn/RandomTech/master/api/src/main/resources/assets/api/icon.png' // My attempt at getting a logo to show up in mvnrepository.com

                scm {
                    connection = 'git@github.com:alexis-evelyn/RandomTech.git'
                    developerConnection = 'git@github.com:alexis-evelyn/RandomTech.git'
                    url = 'https://github.com/alexis-evelyn/RandomTech/tree/master/api'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/alexis-evelyn/RandomTech/blob/master/LICENSE.md'
                    }
                }

                developers {
                    developer {
                        id = 'alexis-evelyn'
                        name = 'Alexis Evelyn'
                        email = 'alexis.a.evelyn@gmail.com'
                    }
                }
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // For Release Staging
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

                // Environment Var For Github, Other For Me
                if (System.getenv('SONATYPE_USERNAME') != null) {
                    username = System.getenv('SONATYPE_USERNAME')
                } else {
                    username = findProperty('SONATYPE_USERNAME')
                }

                // Environment Var For Github, Other For Me
                if (System.getenv('SONATYPE_PASSWORD') != null) {
                    password = System.getenv('SONATYPE_PASSWORD')
                } else {
                    password = findProperty('SONATYPE_PASSWORD')
                }
            }

            // For Snapshot Staging
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots/"

                // Environment Var For Github, Other For Me
                if (System.getenv('SONATYPE_USERNAME') != null) {
                    username = System.getenv('SONATYPE_USERNAME')
                } else {
                    username = findProperty('SONATYPE_USERNAME')
                }

                // Environment Var For Github, Other For Me
                if (System.getenv('SONATYPE_PASSWORD') != null) {
                    password = System.getenv('SONATYPE_PASSWORD')
                } else {
                    password = findProperty('SONATYPE_PASSWORD')
                }
            }

            pom.project {
                name 'API'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'The API designed for RandomTech, just released separately for other mod developers to use.'
                url 'https://github.com/alexis-evelyn/RandomTech/README.md'

                scm {
                    connection 'git@github.com:alexis-evelyn/RandomTech.git'
                    developerConnection 'git@github.com:alexis-evelyn/RandomTech.git'
                    url 'https://github.com/alexis-evelyn/RandomTech/tree/master/api'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://github.com/alexis-evelyn/RandomTech/blob/master/LICENSE.md'
                    }
                }

                developers {
                    developer {
                        id 'alexis-evelyn'
                        name 'Alexis Evelyn'
                        email 'alexis.a.evelyn@gmail.com'
                    }
                }
            }
        }
    }
}


signing {
    def signingKeyId = findProperty("BINTRAY_GPG_KEY_ID")
    def signingKey = findProperty("BINTRAY_GPG_KEY")
    def signingPassword = findProperty("BINTRAY_GPG_PASSWORD")

    // Bintray Specific Key ID
    if (System.getenv('BINTRAY_GPG_KEY_ID') != null) {
        signingKeyId = System.getenv('BINTRAY_GPG_KEY_ID')
    }

    // Bintray Specific Key
    if (System.getenv('BINTRAY_GPG_KEY') != null) {
        signingKey = System.getenv('BINTRAY_GPG_KEY')
    }

    // Bintray Specific Password
    if (System.getenv('BINTRAY_GPG_PASSWORD') != null) {
        signingPassword = System.getenv('BINTRAY_GPG_PASSWORD')
    }

    useInMemoryPgpKeys(signingKeyId as String, signingKey as String, signingPassword as String)
    sign publishing.publications.publishAPI as Closure
}

bintray {
    // For Github Actions Building (Pull From Environment Variable) Otherwise Pull From Gradle Properties
    // Username (Same as Bintray Username)
    if (System.getenv('BINTRAY_USER') != null) {
        user = System.getenv('BINTRAY_USER')
    } else {
        user = findProperty('BINTRAY_USER')
    }

    // Password (Same as Bintray API Key)
    if (System.getenv('BINTRAY_KEY') != null) {
        key = System.getenv('BINTRAY_KEY')
    } else {
        key = findProperty('BINTRAY_KEY')
    }

    // Maven Publication to Push to Bintray
    publications = ['publishAPI']
    publish = true

    pkg {
        repo = "mods"
        name = "API"
        userOrg = "alexis-evelyn"
        licenses = ["MIT"]

        publicDownloadNumbers = true

        githubRepo = 'alexis-evelyn/RandomTech'
        githubReleaseNotesFile = 'README.md'

        dryRun = false // [Default: false] Whether to run this as dry-run, without deploying
        publish = true // [Default: false] Whether version should be auto published after an upload
        override = false // [Default: false] Whether to override version artifacts already published

        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
            desc = "RandomTech API for Fabric 1.16+"
            githubRepo = 'alexis-evelyn/RandomTech'
            websiteUrl = 'https://github.com/alexis-evelyn/RandomTech/tree/master/api'
            issueTrackerUrl = 'https://github.com/alexis-evelyn/RandomTech/issues'
            vcsUrl = 'https://github.com/alexis-evelyn/RandomTech.git'
            gpg {
                sign = true
            }
        }
    }
}