// configure the maven publication
// Use bintrayUpload, not bintrayPublish
publishing {
    publications {
        publishAPI(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact javadocsJar
            groupId = project.maven_group
            artifactId = 'randomtechapi'
            version = project.version

            pom {
                name = 'API'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'The API designed for RandomTech, just released separately for other mod developers to use.'
                url = 'https://github.com/alexis-evelyn/RandomTech/blob/master/README.md'
                // logo = 'https://raw.githubusercontent.com/alexis-evelyn/RandomTech/master/api/src/main/resources/assets/api/icon.png' // My attempt at getting a logo to show up in mvnrepository.com

                scm {
                    connection = 'git@github.com:alexis-evelyn/RandomTech.git'
                    developerConnection = 'git@github.com:alexis-evelyn/RandomTech.git'
                    url = 'https://github.com/alexis-evelyn/RandomTech/tree/master/api'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/alexis-evelyn/RandomTech/blob/master/LICENSE.md'
                    }
                }

                developers {
                    developer {
                        id = 'alexis-evelyn'
                        name = 'Alexis Evelyn'
                        email = 'alexis.a.evelyn@gmail.com'
                    }
                }
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()

        // For Sonatype Staging
        maven {
            def releaseURL = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotURL = "https://oss.sonatype.org/content/repositories/snapshots/"

            url = version.endsWith('-SNAPSHOT') ? snapshotURL : releaseURL

            credentials {
                // Environment Var For Github, Other For Me
                if (System.getenv('SONATYPE_USERNAME') != null) {
                    username = System.getenv('SONATYPE_USERNAME')
                } else {
                    username = findProperty('SONATYPE_USERNAME')
                }

                // Environment Var For Github, Other For Me
                if (System.getenv('SONATYPE_PASSWORD') != null) {
                    password = System.getenv('SONATYPE_PASSWORD')
                } else {
                    password = findProperty('SONATYPE_PASSWORD')
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }

    def signingKey = findProperty("BINTRAY_GPG_KEY")
    def signingPassword = findProperty("BINTRAY_GPG_PASSWORD")

    // Bintray Specific Key - Follow https://stackoverflow.com/a/58000485/6828099
    if (System.getenv('BINTRAY_GPG_KEY') != null) {
        signingKey = System.getenv('BINTRAY_GPG_KEY')
    }

    // Bintray Specific Password
    if (System.getenv('BINTRAY_GPG_PASSWORD') != null) {
        signingPassword = System.getenv('BINTRAY_GPG_PASSWORD')
    }

    useInMemoryPgpKeys(signingKey as String, signingPassword as String)
    sign publishing.publications.publishAPI
}

// For Publishing to CurseForge
// https://github.com/matthewprenger/CurseGradle/wiki
curseforge {
    // Secret API Key for CurseForge
    if (System.getenv('CURSEFORGE_API_KEY') != null) {
        // For Github Actions
        apiKey = System.getenv('CURSEFORGE_API_KEY')
    } else if (hasProperty('CURSEFORGE_API_KEY')) {
        // For Local Development
        apiKey = findProperty('CURSEFORGE_API_KEY')
    } else {
        // This is to get CurseGradle to shut up about the API Key missing if you are not using a CurseGradle task
        // Issue Report: https://github.com/matthewprenger/CurseGradle/issues/32
        apiKey = "DUMMY"
    }

    // API - https://www.curseforge.com/minecraft/mc-mods/randomtech-api
    project {
        id = '407465' // Can be found in the About Project box
        releaseType = 'alpha'
        addGameVersion project(":api").minecraft_version

        // Changelog Info - Changelog will be autogenerated
        if (System.getenv('GITHUB_WORKSPACE') != null) { // Change To CI?
            changelog = file(System.getenv('GITHUB_WORKSPACE') + "/CHANGELOG.md")
            changelogType = 'markdown'
        } else {
            changelog = "# Generated Changelog Missing - Please Refer to https://github.com/alexis-evelyn/RandomTech for Changes"
            changelogType = 'markdown'
        }

        mainArtifact(remapJar) {
            displayName = project.version

            relations {
                requiredDependency 'reborncore'
                requiredDependency 'fabric-api'
                embeddedLibrary 'auto-config-updated-api'
                optionalDependency 'modmenu'
            }
        }
    }

    options {
        debug = false // defaults to false
        javaVersionAutoDetect = true // defaults to true
        javaIntegration = true // defaults to true
        forgeGradleIntegration = false // defaults to true
    }
}

// Made Specifically For Github
task("publishCurseforge", group: "upload", description: "Publish The Mods to CurseForge and Set Environment Vars For Github Actions", dependsOn: tasks.getByName("curseforge")) {
    doLast {
        // File ID Returned By CurseForge After Upload
        def apiID = tasks.getByName("curseforge407465").property("mainArtifact").fileID

        // Environment Var Setting Code - Specifically For Github Actions
        println "(API) CurseForge File ID: $apiID"
        println "::set-env name=API_FILE_ID::$apiID"
    }
}