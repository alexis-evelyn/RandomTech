plugins {
	id 'fabric-loom'
	id 'com.jfrog.bintray' // For publishing to bintray - https://github.com/bintray/gradle-bintray-plugin
	id 'maven-publish'
//	id "com.github.spotbugs"
}

logger.lifecycle "(API) Running Gradle Version: $gradle.gradleVersion"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.mod_version}" // Could look at https://discordapp.com/channels/507304429255393322/721100785936760876/747990135378935848
group = project.maven_group

minecraft {
	// Used to make private methods/classes/fields public
	accessWidener "src/main/resources/api.accesswidener"
}

//spotbugs {
//	ignoreFailures = true
//}

configurations {
	deployerJars
}

repositories {
	maven {
		name "Ladysnake Libs"
		url "https://dl.bintray.com/ladysnake/libs"
	}
	ivy {
		name "Github Repos"
		url "https://jitpack.io/"

		// This exists to force Gradle to ignore bad versioning information from commit based builds on JitPack
		metadataSources {
			artifact() // Look directly for artifact
		}

		layout "maven"
		patternLayout {
			artifact "[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
			artifact "[organisation]/[module]/[revision]/[artifact]-[revision]-dev.[ext]"
			m2compatible = true
		}
	}
}

dependencies {
	deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"

	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// For Jetbrain Annotations
	compile "org.jetbrains:annotations:${project.jetbrains_annotation_version}"

	// For API Guardian Annotations
	compile "org.apiguardian:apiguardian-api:${project.api_guardian_version}"

//	// For Spotbugs Annotations
//	compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
//
//	// For Spotbugs Plugin
//	spotbugs "com.github.spotbugs:spotbugs:${spotbugs.toolVersion.get()}"

	// Reborn Core
	modImplementation ("RebornCore:RebornCore-${project.reborn_core_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Reborn's Energy API
	modImplementation ("teamreborn:energy:${project.reborn_energy_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Mod Menu
	modImplementation ("io.github.prospector:modmenu:${project.mod_menu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// AutoConfig for Use With Mod Menu
	modImplementation ("me.sargunvohra.mcmods:autoconfig1u:${project.autoconf_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "me.sargunvohra.mcmods:autoconfig1u:${project.autoconf_version}"

	// Used to allow customizing data of items and other things
	modImplementation ("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation ("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cardinal_components_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cardinal_components_version}"
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components_version}"
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task javadocs(type: Javadoc) {
	source = sourceSets.main.allJava
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
	classifier = "javadocs"
	javadocs.failOnError false
	from javadocs.destinationDir
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

// configure the maven publication
// Use bintrayUpload, not bintrayPublish
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			artifact javadocsJar
			groupId = project.maven_group
			artifactId 'randomtechapi'
			version = project.mod_version // Bintray doesn't allow snapshot versions, so I'm removing the word SNAPSHOT from the version name. Use `version = version` for snapshot versions.
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

bintray {
	// For Github Actions Building (Pull From Environment Variable)
	// Otherwise Pull From Gradle Properties
	if (System.getenv('BINTRAY_USER') != null) {
		user = System.getenv('BINTRAY_USER')
	} else {
		user = findProperty('BINTRAY_USER')
	}

	if (System.getenv('BINTRAY_KEY') != null) {
		key = System.getenv('BINTRAY_KEY')
	} else {
		key = findProperty('BINTRAY_KEY')
	}

	publications = ['mavenJava']
	publish = true

	pkg {
		repo = "mods"
		name = "API"
		userOrg = "alexis-evelyn"
		licenses = ["MIT"]

		publicDownloadNumbers = true

		githubRepo = 'alexis-evelyn/RandomTech'
		githubReleaseNotesFile = 'README.md'

		dryRun = false // [Default: false] Whether to run this as dry-run, without deploying
		publish = true // [Default: false] Whether version should be auto published after an upload
		override = true // [Default: false] Whether to override version artifacts already published

		version {
			name = project.mod_version // Bintray doesn't allow snapshot versions, so I'm removing the word SNAPSHOT from the version name
			vcsTag = project.version
			released = new Date()
			desc = "RandomTech API for Fabric 1.16+"
			githubRepo = 'alexis-evelyn/RandomTech'
			websiteUrl = 'https://github.com/alexis-evelyn/RandomTech/tree/master/api'
			issueTrackerUrl = 'https://github.com/alexis-evelyn/RandomTech/issues'
			vcsUrl = 'https://github.com/alexis-evelyn/RandomTech.git'
			gpg {
				sign = true
			}
		}
	}
}

// https://docs.gradle.org/current/userguide/build_lifecycle.html
gradle.taskGraph.beforeTask { Task task ->
	logger.lifecycle "(API) Executing $task..."
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
	if (state.failure) {
		logger.lifecycle "(API) FAILED $task..."
	} else {
		logger.lifecycle "(API) COMPLETED $task..."
	}
}

// Separating Unit Testing Only Dependencies From Other Dependencies
apply from: 'unit-testing-only-dependencies.gradle'