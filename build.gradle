plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'com.jfrog.bintray' version '1.8.5' // ./gradlew bintrayUpload - For publishing to bintray - https://github.com/bintray/gradle-bintray-plugin
	id 'com.jfrog.artifactory' version '4.17.2' // ./gradlew artifactoryPublish - For publishing snapshots to bintray artifactory oss - https://github.com/jfrog/build-info
	id 'maven-publish'
//	id "com.github.spotbugs" version '4.5.0'
}

logger.lifecycle "(Root) Running Gradle Version: $gradle.gradleVersion"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
group = project.maven_group

//main_version = project.mod_version
//current_date = new Date()
//snapshot_version = "${main_version}-${current_date}-SNAPSHOT"
version = "${project.mod_version}"

// Tells Gradle to Wait for the API to Remap Before Remapping the Root Mod
remapJar.dependsOn ':api:remapJar'

minecraft {
	// Used to make private methods/classes/fields public
	accessWidener "src/main/resources/randomtech.accesswidener"
}

//spotbugs {
//	ignoreFailures = true
//}

configurations {
	deployerJars
}

repositories {
	maven {
		name "Patchouli"
		url "https://maven.blamejared.com/"
	}
	ivy {
		name "Github Repos"
		url "https://jitpack.io/"

		// This exists to force Gradle to ignore bad versioning information from commit based builds on JitPack
		metadataSources {
			artifact() // Look directly for artifact
		}

		layout "maven"
		patternLayout {
			artifact "[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
			artifact "[organisation]/[module]/[revision]/[artifact]-[revision]-dev.[ext]"
			m2compatible = true
		}
	}
	maven {
		name "NBT Crafting"
		url "https://maven.siphalor.de"
	}
	maven {
		name "Hwyla"
		url "https://maven.tehnut.info"
	}
	flatDir {
		name "Local API Build"
		dirs "api/build/libs"
	}
}

dependencies {
	deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"

	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// For annotations
	compile "org.jetbrains:annotations:${project.jetbrains_annotation_version}"

//	// For Spotbugs Annotations
//	compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
//
//	// For Spotbugs Plugin
//	spotbugs "com.github.spotbugs:spotbugs:${spotbugs.toolVersion.get()}"

	// RandomTech API - https://docs.gradle.org/current/userguide/multi_project_builds.html
	implementation project(path: ':api') // ./gradlew :api:build -> ./api/build/libs/alexisevelyn-api-0.0.4-SNAPSHOT.jar
	include (name: 'alexisevelyn-api', version: "${project(":api").mod_version}", ext: 'jar') // Retrieves the version info from API's mod_version var and includes the remapped API jar into the root jar
	
	// Reborn Core
	modImplementation ("RebornCore:RebornCore-${project.reborn_core_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Reborn's Energy API
	modImplementation ("teamreborn:energy:${project.reborn_energy_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Mod Menu
	modImplementation ("io.github.prospector:modmenu:${project.mod_menu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// AutoConfig for Use With Mod Menu
	modImplementation ("me.sargunvohra.mcmods:autoconfig1u:${project.autoconf_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "me.sargunvohra.mcmods:autoconfig1u:${project.autoconf_version}"

	// Hywla
	// modImplementation "curse.maven:hywla:${project.hywla_curseforge_version}" // Same fix as on Patchouli. the fix was that loom currently cannot handle depending on artifacts with the same ID but different classifier (regular patchouli jar vs :api)
	modCompileOnly ("mcp.mobius.waila:Hwyla:${project.hywla_version}") { // Used to be modImplementation, but kept causing issues with dev server
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Roughly Enough Items
	modImplementation ("me.shedaniel:RoughlyEnoughItems:${project.rei_version}") { // TODO: Fix - Recipe Display Crashes Game
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Patchouli API - TODO: Update to non-snapshot version when released
	modImplementation ("vazkii.patchouli:Patchouli:${project.patchouli_version}") { // Note: https://discordapp.com/channels/507304429255393322/507982478276034570/745174055383990372
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Used to allow customizing data of items and other things
	modImplementation ("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation ("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cardinal_components_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cardinal_components_version}"
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components_version}"

	// For Shaders - https://github.com/Ladysnake/Satin/blob/master/README.md
	modImplementation ("io.github.ladysnake:Satin:${project.satin_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "io.github.ladysnake:Satin:${project.satin_version}"

	// For NBT Crafting - https://github.com/Siphalor/nbt-crafting/blob/1.16-2.0/README.md
	modImplementation ("de.siphalor:nbtcrafting-1.16:${project.nbt_crafting_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "de.siphalor:nbtcrafting-1.16:${project.nbt_crafting_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task javadocs(type: Javadoc) {
	source = sourceSets.main.allJava
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
	classifier = "javadocs"
	javadocs.failOnError false
	from javadocs.destinationDir
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE.md"
}

// configure the maven publication
publishing {
	publications {
		publishRandomTech(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			artifact javadocsJar
			groupId = project.maven_group
			artifactId 'randomtech'
			version = project.version
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

// For Release Builds
bintray {
	// For Github Actions Building (Pull From Environment Variable) Otherwise Pull From Gradle Properties
	// Username (Same as Bintray Username)
	if (System.getenv('BINTRAY_USER') != null) {
		user = System.getenv('BINTRAY_USER')
	} else {
		user = findProperty('BINTRAY_USER')
	}

	// Password (Same as Bintray API Key)
	if (System.getenv('BINTRAY_KEY') != null) {
		key = System.getenv('BINTRAY_KEY')
	} else {
		key = findProperty('BINTRAY_KEY')
	}

	// Maven Publication to Push to Bintray
	publications = ['publishRandomTech']
	publish = true

	pkg {
		repo = "mods"
		name = "RandomTech"
		userOrg = "alexis-evelyn"
		licenses = ["MIT"]

		publicDownloadNumbers = true

		githubRepo = 'alexis-evelyn/RandomTech'
		githubReleaseNotesFile = 'README.md'

		dryRun = true // [Default: false] Whether to run this as dry-run, without deploying
		publish = true // [Default: false] Whether version should be auto published after an upload
		override = false // [Default: false] Whether to override version artifacts already published

		version {
			name = project.version
			vcsTag = project.version
			released = new Date()
			desc = "RandomTech for Fabric 1.16+"
			githubRepo = 'alexis-evelyn/RandomTech'
			websiteUrl = 'https://github.com/alexis-evelyn/RandomTech'
			issueTrackerUrl = 'https://github.com/alexis-evelyn/RandomTech/issues'
			vcsUrl = 'https://github.com/alexis-evelyn/RandomTech.git'
			gpg {
				sign = true
			}
		}
	}
}

// For Snapshot Builds - https://www.jfrog.com/confluence/display/JFROG/Gradle+Artifactory+Plugin#GradleArtifactoryPlugin-Configuration
artifactory {
	contextUrl = 'https://oss.jfrog.org' // Use your own url if you are self-hosting the artifactory server
	publish {
		repository {
			if (version.endsWith("-SNAPSHOT")) {
				repoKey = 'oss-snapshot-local'
			} else {
				repoKey = 'oss-release-local'
			}

			// For Github Actions Building (Pull From Environment Variable) Otherwise Pull From Gradle Properties
			// Username (Same as Bintray Username)
			if (System.getenv('BINTRAY_USER') != null) {
				username = System.getenv('BINTRAY_USER')
			} else {
				username = findProperty('BINTRAY_USER')
			}

			// Password (Same as Bintray API Key)
			if (System.getenv('BINTRAY_KEY') != null) {
				password = System.getenv('BINTRAY_KEY')
			} else {
				password = findProperty('BINTRAY_KEY')
			}
		}
		defaults {
			// Maven Publication to Push to Artifactory
			publications ('publishRandomTech')
			// properties = [ 'bintray.repo': 'alexis-evelyn/mods', 'bintray.package': 'RandomTech', 'bintray.version': version.toString() ]
		}
	}
}

// https://docs.gradle.org/current/userguide/build_lifecycle.html
gradle.taskGraph.beforeTask { Task task ->
	logger.lifecycle "(Root) Executing $task..."
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
	if (state.failure) {
		logger.lifecycle "(Root) FAILED $task..."
	} else {
		logger.lifecycle "(Root) COMPLETED $task..."
	}
}

// Separating Runtime Only Dependencies From Other Dependencies
apply from: 'runtime-only-dependencies.gradle'

// Separating Unit Testing Only Dependencies From Other Dependencies
apply from: 'unit-testing-only-dependencies.gradle'

// For all projects. This includes subprojects and our project.
//allprojects {
//	// I believe it includes parent projects too, but verify that.
//}

// For Any General Subprojects
//subprojects {}

// Specifically the API Subproject
project(':api') {
	apply plugin: 'fabric-loom'
}

// Specifically for this project?
//project(":") {}

/* https://discordapp.com/channels/507304429255393322/507982478276034570/745174375753449543
 *
 * modCompile - outdated, don't use.
 * modImplementation -> if someone depends on YOUR mod, they get this dependency as runtime dependency, but can't reference its code
 * modApi -> if someone depends on your mod, they get this dependency as compile time dependency, and can reference its code directly
 */